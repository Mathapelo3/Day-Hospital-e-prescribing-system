@model Day_Hospital_e_prescribing_system.ViewModel.AdmissionVM
@{
    ViewData["Title"] = "AdmitPatient";
    Layout = "~/Views/Shared/NurseLayout.cshtml";
    
}

<!DOCTYPE html>
<html>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<style>
    * {
        box-sizing: border-box;
    }

    body {
        background-color: #f1f1f1;
    }

    #regForm {
        background-color: #ffffff;
        margin: 100px auto;
        font-family: Raleway;
        padding: 40px;
        width: 70%;
        min-width: 300px;
    }

    h1 {
        text-align: center;
    }

    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #007bff;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #04AA6D;
        }
</style>
<div class="card">
    <div class="card-header">
        <div class="text-center ">
            <h3 class="display-6 text-primary text-center text-bold">ADMISSION</h3>
        </div>
    </div>
    <body>

        <form asp-action="AdmitPatient" asp-controller="Nurse" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="SurgeryID" />
            <br />
            <br />
            <div class="card">
                <div class="body">
                    <div class="card-header text-bold">
                        <strong> @Model.Name @Model.Surname</strong>
                    </div>
                    <div class="card-body">

                        <div class="container-fluid">
                            <div class="row">
                                <div class="form-group col-6">
                                    <label for="startDate"> Date: </label>
                                    <input class="form-control" asp-for="Date" type="date" id="datePicker" />
                                </div>
                               <div class="form-group col-6">
                                    <label class="form-label">Select AM/PM:</label>
                                    <select class="form-control" asp-for="Time">
                                        <option value="AM" selected="@(Model.Time == "AM")">AM</option>
                                        <option value="PM" selected="@(Model.Time == "PM")">PM</option>
                                    </select>
                                 </div>
                            </div>
                            <div class="form-group col-md-6">
                                <label asp-for="WardId">Select Ward:</label>
                                    <br />
                                @Html.DropDownList("WardId", ViewBag.Wards as SelectList, "Select Ward", new { id = "wardDropdown", @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.WardId, "", new { @class = "text-danger" })
                                </div>
                            <div class="form-group col-md-6">
                                <label asp-for="BedId">Select Bed:</label>
                                    <br />
                                <select id="bedDropdown" asp-for="BedId"  class="form-control">
                                    <option value="1">Select a ward first</option>
                                                
                                                
                                </select>
                                            @Html.ValidationMessageFor(model => model.BedId, "", new { @class = "text-danger" })
                                </div>
                               @* <div class="form-row">
                                    <div class="form-group col-md-6">
                                    <label asp-for="Surgery_TreatmentCodeID" for="sel1">Treatment Code:</label>
                                        <br />
                                        <select asp-for="Surgery_TreatmentCodeID" class="form-control" asp-items="Model.Surgery_TreatmentCode"></select>
                                    </div>*@
                                   
                                <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label asp-for="Surgery_TreatmentCodeID">Surgery Treatmentcode:</label>
                                    <br />
                                    <input value="@Model.Description" class="form-control" readonly /> 
                                </div>
 
                            <div class="form-group col-md-1">
                                        <label>&nbsp;</label>
                                    <button type="button" class="btn btn-primary form-control" onclick="location.href = '@Url.Action("EditTreatmentCode","Nurse")'" id="editTreatmentCode">
                                            <i class="fas fa-edit"></i> <!-- Font Awesome plus icon -->
                                        </button>


                                   @* <div class="form-row">
                                        <div class="form-group col-md-6">*@
                                           @* <label asp-for="Surgery_TreatmentCodeID" for="sel1">Treatment Code:</label>*@
                                            <br />
                                     @*   <select asp-for="Surgery_TreatmentCodeID" class="form-control" asp-items="Model.Surgery_TreatmentCode"></select>
                                        </div>
                                    
                                    </div>*@
                                </div>
              
                               
                                </div>
                             
     
                    </div>
                </div>
            </div>



        @*</form>
    </body>*@
</div>
            <div style="overflow:auto;">
                <div style="float:right;">
                    <button type="button" id="prevBtn" onclick="location.href = '@Url.Action("AdmissionWizard","Nurse")'">Previous</button>
                    <button type="submit" id="nextBtn">Next</button>
                </div>
            </div>
            <!-- Circles which indicates the steps of the form: -->
            <div style="text-align:center;margin-top:40px;">
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
        </form>
    </body>


                @section Scripts {
    <script src="~/Scripts/jquery-3.6.0.min.js"></script>
    <script>
            $(document).ready(function () {
                $('#wardDropdown').change(function () {
                    var wardId = $(this).val();
                    if (wardId) {
                        $.getJSON('@Url.Action("GetBeds", "Nurse")', { wardId: wardId }, function (beds) {
                            var $bedDropdown = $('#bedDropdown');
                            $bedDropdown.empty();
                            $bedDropdown.append('<option value="">Select a bed</option>');
                            $.each(beds, function (i, bed) {
                                $bedDropdown.append($('<option>', {
                                    value: bed.value,
                                    text: bed.text
                                }));
                            });
                        });
                    } else {
                        $('#bedDropdown').empty().append('<option value="">Select a ward first</option>');
                    }
                });
            });

    </script>
}

       @* <script>
            var currentTab = 0; // Current tab is set to be the first tab (0)
            showTab(currentTab); // Display the current tab

            function showTab(n) {
                // This function will display the specified tab of the form...
                var x = document.getElementsByClassName("tab");
                x[n].style.display = "block";
                //... and fix the Previous/Next buttons:
                if (n == 0) {
                    document.getElementById("prevBtn").style.display = "none";
                } else {
                    document.getElementById("prevBtn").style.display = "inline";
                }
                if (n == (x.length - 1)) {
                    document.getElementById("nextBtn").innerHTML = "Submit";
                } else {
                    document.getElementById("nextBtn").innerHTML = "Next";
                }
                //... and run a function that will display the correct step indicator:
                fixStepIndicator(n)
            }

            function nextPrev(n) {
                // This function will figure out which tab to display
                var x = document.getElementsByClassName("tab");
                // Exit the function if any field in the current tab is invalid:
                if (n == 1 && !validateForm()) return false;
                // Hide the current tab:
                x[currentTab].style.display = "none";
                // Increase or decrease the current tab by 1:
                currentTab = currentTab + n;
                // if you have reached the end of the form...
                if (currentTab >= x.length) {
                    // ... the form gets submitted:
                    document.getElementById("regForm").submit();
                    return false;
                }
                // Otherwise, display the correct tab:
                showTab(currentTab);
            }

            function validateForm() {
                // This function deals with validation of the form fields
                var x, y, i, valid = true;
                x = document.getElementsByClassName("tab");
                y = x[currentTab].getElementsByTagName("input");
                // A loop that checks every input field in the current tab:
                for (i = 0; i < y.length; i++) {
                    // If a field is empty...
                    if (y[i].value == "") {
                        // add an "invalid" class to the field:
                        y[i].className += " invalid";
                        // and set the current valid status to false
                        valid = false;
                    }
                }
                // If the valid status is true, mark the step as finished and valid:
                if (valid) {
                    document.getElementsByClassName("step")[currentTab].className += " finish";
                }
                return valid; // return the valid status
            }

            function fixStepIndicator(n) {
                // This function removes the "active" class of all steps...
                var i, x = document.getElementsByClassName("step");
                for (i = 0; i < x.length; i++) {
                    x[i].className = x[i].className.replace(" active", "");
                }
                //... and adds the "active" class on the current step:
                x[n].className += " active";
            }

            function populateBedsDropdown(wardId) {
                // Assuming you have an endpoint to fetch beds by wardId
                fetch(`/api/wards/${wardId}/beds`)
                    .then(response => response.json())
                    .then(beds => {
                        var bedSelect = document.getElementById('bedSelect');
                        bedSelect.innerHTML = ''; // Clear existing options
                        beds.forEach(bed => {
                            var option = document.createElement('option');
                            option.value = bed.Id;
                            option.text = bed.Name;
                            bedSelect.appendChild(option);
                        });
                    });
            }
        </script>*@
 
</html>



